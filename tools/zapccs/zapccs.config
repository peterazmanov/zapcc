[MaxMemory]
# This is **per-process** limit so for example running
# ninja -j8 will use up to eight times the limit.
2000

# For files, wildcards *,? may be used.
# case and Linux/Windows slash type insensitive.
# Examples:
# */myfile.*
# */mydir/myfile
# *.dat

[Mutable]
# Header files that will not be cached.
# For macro-dependent headres, if the macro change frequently use this and 
# if rarely use [WatchMacro] which will reset only when the macro value changes.

# boost::fusion (main)
*/libs/fusion/test/algorithm/fold.hpp
# boost::random (main)
*/libs/random/test/test_real_distribution.ipp
*/libs/random/test/test_generator.ipp
*/libs/random/test/test_distribution.ipp
# boost::test (main)
*/boost/test/minimal.hpp
# boost::test (BOOST_TEST_MODULE)
*/boost/test/detail/config.hpp
# Chromium (IPC macros)
*/chromium/ipc/ipc_message_null_macros.h
*/chromium/ipc/param_traits_write_macros.h
# ITK (nested include guards)
*/Modules/Filtering/FFT/include/itkForwardFFTImageFilter.h
*/Modules/Filtering/FFT/include/itkInverseFFTImageFilter.h
*/Modules/Filtering/FFT/include/itkRealToHalfHermitianForwardFFTImageFilter.h
# range v3
*/test/algorithm/*

[DoNotZap]
# Source files compiled without caching.

# Boost (<boost/python/detail/result.hpp> override)
*/libs/python/test/result.cpp
# LibreOffice (aBibliographyDataFieldMap)
*/xmloff/source/text/XMLSectionExport.cxx
# Qt (Object::insertMember inlined)
*/qtdeclarative/src/qml/jsruntime/qv4object.cpp
# Qt (kPpapiFlashVersion)
*/qtwebengine/src/core/content_client_qt.cpp
# XROOTD (#define _FILE_OFFSET_BITS)
*/src/XrdPosix/XrdPosixPreload32.cc
# webkit (WebCore::IDBOpenDBRequest vs WebCore::IDBClient::IDBOpenDBRequest)
*/WebCore/Modules/indexeddb/client/IDBOpenDBRequestImpl.cpp
# SuperTuxKart (PARAM_PREFIX, PARAM_DEFAULT)
*/src/config/user_config.cpp

[WatchMacro]
# zapcc will reset when this macro value changes definition during a build via
# different -D command line flags or #define from different files that zappc
# heuristic did not catch it otherwise. Macros that do not change during the
# whole build need not be here at all.
# Don't add a macro unless strictly required as this will cause cache resets
# and slowdown. If only one file is compiled with the different definition,
# it is usually better to put this files in the [DoNotZap] section.

# AMPL
MP_ASSERT
# Boost
BOOST_AUTO_TEST_MAIN
BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS
BOOST_ENABLE_ASSERT_HANDLER
BOOST_GEOMETRY_ENABLE_ASSERT_HANDLER
BOOST_REGEX_NARROW_INSTANTIATE
BOOST_REGEX_WIDE_INSTANTIATE
# catch
CATCH_CONFIG_MAIN
CATCH_CONFIG_RUNNER
# Dealii
INTEL_NO_MACRO_BODY
DINT
DLONG
# eigen
EIGEN_TEST_FUNC
# ETL
CPM_BENCHMARK
# libcxx
_LIBCPP_DEBUG
# LLVM
GET_INSTRINFO_CTOR_DTOR
GET_INSTRINFO_NAMED_OPS
GET_INSTRINFO_MC_DESC
GET_INSTRMAP_INFO
GET_LLVM_INTRINSIC_FOR_MS_BUILTIN
GET_REGINFO_TARGET_DESC
GET_SUBTARGETINFO_MC_DESC
GET_SUBTARGETINFO_TARGET_DESC
DONT_GET_PLUGIN_LOADER_OPTION
# MCRL2
__COMMAND_LINE_INTERFACE__
# MongoDB
MONGO_LOG_DEFAULT_COMPONENT
# qmcpack
USE_FAKE_RNG
USE_FAKE_CLOCK
# Quinoa, Charm++
CK_TEMPLATES_ONLY
# VTK
vtkRenderingCore_AUTOINIT
vtkRenderingOpenGL2_AUTOINIT
vtkInteractionStyle_AUTOINIT
vtkRenderingFreeType_AUTOINIT
vtkRenderingVolumeOpenGL2_AUTOINIT
vtkRenderingGL2PSOpenGL2_AUTOINIT
vtkIOExportOpenGL2_AUTOINIT
# XrootD
XRD_TRACE
XRDXROOTD_STAT_CLASSNAME
